// (local-set-key (kbd "s-r") (lambda () (interactive) (save-buffer) (process-send-string "*shell skm-oed*" "echo '\n'; make gibson-bruck.wppl.js && time node gibson-bruck.wppl.js\n")))

// versions of functional helpers that take lists as first arg rather than second
var _map = function(xs, f) { return map(f, xs) }
var _map2 = function(xs, ys, f) { return map2(f, xs, ys) }
var _mapIndexed = function(xs, f) { return mapIndexed(f, xs) }
var _filter = function(xs, f) { return filter(f, xs) }

var SNQ = function(v) {
  display(v)
  process.exit()
}

var exit = function() {
  process.exit()
}

var round3 = function(x) {
  return Math.round(x * 1000)/1000;
}

var round6 = function(x) {
  return Math.round(x * 1000000)/1000000;
}


var mean = function(xs) {
  sum(xs) / xs.length
}

var listAdd = function(xs, ys) {
  map2(function(x, y) { return x + y }, xs, ys)
}

// C(n,k) = n! / (k! * (n-k)!)
var choose = function(n,k) {
  // optimizations for common cases
  if (k == 0) { return 1 }
  if (k == 1) { return n }
  if (n < k) { return 0 }
  var botMax = ((k > n-k) ? k : n-k);
  var botMin = ((k > n-k) ? n-k : k);
  var top = _.range(botMax+1, n+1)
  var bot = _.range(1, botMin + 1);
  return product(top)/product(bot)
}


var speciesNames = ["codY",
                    "CodY",
                    "flache",
                    "SigD",
                    "SigD_hag",
                    "hag",
                    "Hag",
                    "CodY_flache",
                    "CodY_hag"
                   ];

var numSpecies = speciesNames.length
var speciesNums = _.range(numSpecies)
var speciesNameToNum = _.fromPairs(_.zip(speciesNames, speciesNums))

var initialState = [1, 0, 1, 0, 0, 1, 0, 0, 0];
var vInitialState = Vector(initialState);


// input: a species name
// output: a corresponding one-hot vector
var speciesOneHot = cache(function(sp) {
  return _map(speciesNames,
              function(name) { return name == sp ? 1 : 0})
})



var speciesListOneHots = function(species) {
  return reduce(
    function(sp, acc) {
      return listAdd(acc, speciesOneHot(sp))
    },
    speciesOneHot('dummy'),
    species
  )
};



var lawStrings = [
  "codY -> codY + CodY",
  "CodY -> ∅",
  "flache -> flache + SigD",
  "SigD -> ∅",
  "SigD_hag -> SigD + hag + Hag",
  "Hag -> ∅",
  "SigD + hag -> SigD_hag",
  "SigD_hag -> SigD + hag",
  "CodY + flache -> CodY_flache",
  "CodY_flache -> CodY + flache",
  "CodY + hag -> CodY_hag",
  "CodY_hag -> CodY + hag"
];

var numLaws = lawStrings.length;
var lawNums = _.range(numLaws);

// convert string representation of laws into reactant, product, and stoichiometry matrices
var lawStringsSplit = _map(lawStrings,
                           function(str) { return str.split(/ *-> */g )})
var lawInputStrings = _map(_.map(lawStringsSplit,'0'), function(str) { return str.split(/ *\+ */g) })
var lawOutputStrings = _map(_.map(lawStringsSplit,'1'), function(str) { return str.split(/ *\+ */g) })

var lawInputs = map(speciesListOneHots, lawInputStrings)
var lawOutputs = map(speciesListOneHots, lawOutputStrings)

// aka the stoichiometry matrix
var laws = _map2(lawInputs,
                 lawOutputs,
                 function(input, output) {
                   var negInput = _map(input, function(x) { return x * -1})
                   return listAdd(negInput, output)
                 })
var vLaws = _map(laws, function(law) { return Vector(law) });



var dependsOn = cache(function(i,j) {
  //display('does [' + lawStrings[i] + '] depend on [' + lawStrings[j] + '] ?' )
  //display('relevant inputs: ' + lawInputStrings[i].join(', '))
  var iInputStrings = lawInputStrings[i]
  return _.some(_map(iInputStrings,
                     function(name) {
                       var speciesNum = speciesNameToNum[name]
                       //display('j change to ' + name + ': ' + speciesNum)
                       return laws[j][speciesNum] > 0
                     }))
})

// _map(lawNums,
//      function(i) {
//        _map(lawNums,
//             function(j) {
//               console.log(dependsOn(i,j))
//             }
//            )
//      })
//exit()

var kProtDeg = 0.0002
var kCodOn = 0.02 // assumed to be unknown in wilkinson paper
var kCodOff = 0.1 // assumed to be unknown in wilkinson paper
var kProdSigD = 1 // assumed to be unknown in wilkinson paper
var trueRates = [0.1,
                 kProtDeg,
                 kProdSigD,
                 kProtDeg,
                 1,
                 kProtDeg,
                 0.01,
                 0.1,
                 kCodOn,
                 kCodOff,
                 0.01,
                 0.1]

var ratePriorDists = [Delta({v: 0.1}),
                      Delta({v: kProtDeg}),

                      // law whose rate is kProdSigD
                      // mean                | 3.2
                      // mode                | 2.4
                      // standard deviation  | 1.6
                      // variance            | 2.56
                      // skewness            | 1
                      Gamma({shape: 4, scale: 0.8}),

                      Delta({v: kProtDeg}),
                      Delta({v: 1}),
                      Delta({v: kProtDeg}),
                      Delta({v: 0.01}),
                      Delta({v: 0.1}),

                      // law whose rate is kCodOn
                      // mean                | 0.4
                      // mode                | 0.2
                      // standard deviation  | 0.282843
                      // variance            | 0.08
                      // skewness            | sqrt(2)≈1.41421
                      Gamma({shape: 2, scale: 0.2}),

                      // law whose rate is kCodOff
                      // mean                | 1.
                      // mode                | 0.5
                      // standard deviation  | 0.707107
                      // variance            | 0.5
                      // skewness            | sqrt(2)≈1.41421
                      Gamma({shape: 2, scale: 0.5}),

                      Delta({v: 0.01}),
                      Delta({v: 0.1})
                     ]


var gillespie = function(vRates, vState, tStart, tEnd) {
  if (tStart > tEnd) {
    return []
  }

  var getGValue = function(i) {
    var input = lawInputs[i]
    return product(_map(speciesNums,
                        function(j) {
                          var state_j = T.get(vState, j)
                          var input_j = input[j]
                          return choose(state_j, input_j)
                        }))
  }
  var gValues = Vector(map(getGValue, lawNums))

  var hazards = T.mul(vRates, gValues),
      totalHazard = T.sumreduce(hazards);
  if (totalHazard == 0) {
    return []
  }
  var dtDist = Exponential({a: totalHazard});
  var dt = sample(dtDist);
  var lawDist = Discrete({ps: hazards});
  var lawNum = sample(lawDist);
  console.log('gillespie ' + lawNum);

  var stateUpdate = vLaws[lawNum];
  var newState = T.add(vState, stateUpdate);

  var jump = {
    //dt: dt,
    t: tStart + dt,
    lawNum: lawNum,
    state: newState
    //prevState: vState,
    //gValues: gValues
  }

  return [jump].concat(gillespie(vRates, newState, tStart + dt, tEnd))
}

// _hazards and _reactionTimes are cumulative arrays
var gibsonBruck = function(rates, vState, tStart, tEnd, _hazards, _reactionTimes) {

  var getHazard = function(state, i) {
    var input = lawInputs[i]
    return rates[i] * product(_map(speciesNums,
                                   function(j) {
                                     var state_j = T.get(state, j)
                                     var input_j = input[j]
                                     return choose(state_j, input_j)
                                   }))
  }

  var recurse = function(t, vState, oldHazards, oldReactionTimes) {
    if (t > tEnd) {
      return {t: t, state: vState}
    }
    var tNext = _.min(oldReactionTimes)
    var i = _.indexOf(oldReactionTimes, tNext)
    display('old hazards: ' + _map(oldHazards, round6).join(', '))
    display('old rts:     ' + _map(oldReactionTimes, round6).join(', '))
    display('running law ' + i + ' : ' + lawStrings[i])
    display('time is ' + tNext)

    var stateUpdate = vLaws[i];
    var newState = T.add(vState, stateUpdate);
    display('state:')
    display(_.fromPairs(_.zip(speciesNames, T.toScalars(newState))))

    // update hazards for any dependent laws
    var newHazards = _map(lawNums,
                          function(j) {
                            if (dependsOn(j,i) || j == i) {
                              console.log('changed hazard for ' + lawStrings[j] + ': ' + getHazard(newState, j))
                              return getHazard(newState, j)
                            } else {
                              return oldHazards[j]
                            }
                          })

    var newReactionTimes = _map(lawNums,
                                function(j) {
                                  if (newHazards[j] == 0) {
                                    return Infinity
                                  } else if (j == i) {
                                    return tNext + sample(Exponential({a: newHazards[j]}))
                                  } else if (dependsOn(j,i)) {
                                    if (oldReactionTimes[j] == Infinity) {
                                      display(newHazards[j])
                                      return tNext + sample(Exponential({a: newHazards[j]}))
                                    } else {
                                      return tNext + (oldHazards[j] / newHazards[j]) * (oldReactionTimes[j] - tNext)
                                    }
                                  } else {
                                    return oldReactionTimes[j]
                                  }
                                }
                               )

    display('new hazards: ' + _map(newHazards, round6).join(', '))
    display('new rts:     ' + _map(newReactionTimes, round6).join(', '))

    display('\n')
    return recurse(tNext, newState, newHazards, newReactionTimes)
  }

  var hazards = _map(lawNums, function(i) { getHazard(vState, i)} )
  var reactionTimes = _map(hazards, function(h) { return h === 0 ? Infinity : sample(Exponential({a: h})) })
  return recurse(tStart, vState, hazards, reactionTimes)
}

util.seedRNG(2)
var global_tEnd = 30;

//display(_.last(gillespie(Vector(trueRates), vInitialState, 0, global_tEnd)).state)

//actualMeasurement

gibsonBruck(trueRates, vInitialState, 0, global_tEnd)
